#!/usr/bin/env bash
# et - Simplified Kubernetes wrapper for EventTrader
# Focuses on essential commands only

NS=default
DEP=event-trader
WORKSPACE_DIR="$HOME/EventMarketDB"

# Parse dates for start command
parse_dates() {
  FROM_DATE=$(date -d "3 days ago" "+%Y-%m-%d" 2>/dev/null || date "+%Y-%m-%d")
  TO_DATE=$(date "+%Y-%m-%d")
  
  # Check for date arguments
  for arg in "$@"; do
    if [[ "$arg" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
      if [ -z "$CUSTOM_FROM" ]; then
        CUSTOM_FROM="$arg"
      else
        CUSTOM_TO="$arg"
      fi
    fi
  done
  
  [ -n "$CUSTOM_FROM" ] && FROM_DATE="$CUSTOM_FROM"
  [ -n "$CUSTOM_TO" ] && TO_DATE="$CUSTOM_TO"
  
  # Ensure function returns 0
  return 0
}

# Get command
COMMAND="${1:-start}"
shift || true

case "$COMMAND" in
  start)
    parse_dates "$@"
    ARGS=("scripts/run_event_trader.py" "--from-date" "$FROM_DATE" "--to-date" "$TO_DATE")
    
    # Add mode flags
    [[ "$*" == *"-live"* ]] && ARGS+=("-live")
    [[ "$*" == *"-historical"* ]] && ARGS+=("-historical")
    [[ "$*" == *"--gap-fill"* ]] && ARGS+=("--gap-fill")
    
    # Deploy
    echo "Starting EventTrader pod..."
    kubectl scale deploy/$DEP -n $NS --replicas=1
    
    JSON_ARGS=$(printf '%s\n' "${ARGS[@]}" | jq -R . | jq -s .)
    kubectl patch deploy/$DEP -n $NS --type='json' -p='[
      {"op": "replace", "path": "/spec/template/spec/containers/0/command", "value": ["python"]},
      {"op": "replace", "path": "/spec/template/spec/containers/0/args", "value": '"$JSON_ARGS"'}
    ]'
    
    kubectl rollout status deploy/$DEP -n $NS
    echo "EventTrader running with: ${ARGS[*]}"
    ;;
    
  stop)
    kubectl scale deploy/$DEP -n $NS --replicas=0
    echo "EventTrader scaled to 0 replicas."
    ;;
    
  restart)
    $0 stop
    sleep 5
    $0 start "$@"
    ;;
    
  status)
    echo "=== POD STATUS ==="
    kubectl get pods -n $NS -l app=$DEP -o wide
    echo ""
    echo "=== RECENT LOGS ==="
    kubectl logs -n $NS -l app=$DEP --tail=20 2>/dev/null || echo "No logs available"
    ;;
    
  logs)
    kubectl logs -n $NS -l app=$DEP --tail=50 -f
    ;;
    
  force-stop-all)
    echo "Scaling EventTrader deployment to 0 replicas (hard stop)..."
    kubectl scale deploy/$DEP -n $NS --replicas=0 || true
    echo "Waiting briefly to ensure pods terminate..."
    sleep 5

    echo "Invoking local cleanup..."
    cd "$WORKSPACE_DIR"
    ./scripts/event_trader.sh force-stop-all
    ;;
    
  chunked-historical|reset-all|partial-reset|init-neo4j|neo4j-report)
    # Pass through to local script without affecting live pods
    cd "$WORKSPACE_DIR"
    ./scripts/event_trader.sh "$COMMAND" "$@"
    ;;
    
  *)
    echo "Usage: et {start|stop|restart|status|logs|chunked-historical|reset-all|partial-reset|force-stop-all}"
    echo "  start [-live|-historical] [FROM TO]  - Start EventTrader pod"
    echo "  stop                                 - Stop EventTrader pod"
    echo "  restart                              - Restart EventTrader pod"
    echo "  status                               - Show pod status and recent logs"
    echo "  logs                                 - Follow pod logs"
    echo "  chunked-historical FROM TO           - Process large date ranges locally"
    echo "  reset-all                            - Reset all databases"
    echo "  partial-reset                        - Reset preserving initialization"
    echo "  force-stop-all                       - Force stop everything"
    exit 1
    ;;
esac
