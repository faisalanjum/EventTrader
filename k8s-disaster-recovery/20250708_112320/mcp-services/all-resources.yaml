apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-07-07T04:07:14Z"
    generateName: mcp-neo4j-cypher-79fc6cf54b-
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: 79fc6cf54b
    name: mcp-neo4j-cypher-79fc6cf54b-xprqc
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: mcp-neo4j-cypher-79fc6cf54b
      uid: 45cb812c-7124-4a2a-8199-237d072f0070
    resourceVersion: "5828810"
    uid: f2dd1237-5dd4-4ab7-8500-04545ff9db1b
  spec:
    containers:
    - args:
      - |-
        set -e
        cd /source
        echo "Installing dependencies..."
        pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
        pip install -e .

        echo "MCP Neo4j Cypher server installed. Container ready for kubectl exec."
        # Keep container running
        sleep infinity
      command:
      - /bin/bash
      - -c
      env:
      - name: NEO4J_URI
        value: bolt://neo4j-bolt.neo4j:7687
      - name: NEO4J_USERNAME
        valueFrom:
          secretKeyRef:
            key: NEO4J_USERNAME
            name: eventtrader-secrets
      - name: NEO4J_PASSWORD
        valueFrom:
          secretKeyRef:
            key: NEO4J_PASSWORD
            name: eventtrader-secrets
      - name: NEO4J_DATABASE
        value: neo4j
      - name: PYTHONUNBUFFERED
        value: "1"
      image: python:3.11-slim
      imagePullPolicy: IfNotPresent
      name: mcp-neo4j-cypher
      resources:
        limits:
          cpu: 250m
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /source
        name: source-code
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sr29t
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: minisforum
    nodeSelector:
      kubernetes.io/hostname: minisforum
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoSchedule
      key: dedicated
      operator: Equal
      value: graph
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
        type: Directory
      name: source-code
    - name: kube-api-access-sr29t
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:16:01Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:07:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:16:01Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:16:01Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:07:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a1fda4df2241ed3dd7c61a2775b3e00ecdda1e38eef20ba8b6964da4dca51ad1
      image: docker.io/library/python:3.11-slim
      imageID: docker.io/library/python@sha256:139020233cc412efe4c8135b0efe1c7569dc8b28ddd88bddb109b764f8977e30
      lastState:
        terminated:
          containerID: containerd://0abed0c95f0a276ad7ea599614a9609d2a1e1bd275feda114cc7350951de2e6d
          exitCode: 255
          finishedAt: "2025-07-07T04:15:44Z"
          reason: Unknown
          startedAt: "2025-07-07T04:07:14Z"
      name: mcp-neo4j-cypher
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-07-07T04:16:00Z"
    hostIP: 192.168.40.73
    hostIPs:
    - ip: 192.168.40.73
    phase: Running
    podIP: 10.244.0.253
    podIPs:
    - ip: 10.244.0.253
    qosClass: Burstable
    startTime: "2025-07-07T04:07:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-07-07T04:07:14Z"
    generateName: mcp-neo4j-memory-7f8c5d7459-
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 7f8c5d7459
    name: mcp-neo4j-memory-7f8c5d7459-jws2q
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: mcp-neo4j-memory-7f8c5d7459
      uid: e3201768-0ac3-4a16-b60b-256c4cef7531
    resourceVersion: "5828797"
    uid: 5a382c25-709e-49e8-b512-bd7b1d14eba6
  spec:
    containers:
    - args:
      - |-
        set -e
        cd /source
        echo "Installing dependencies..."
        pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
        pip install -e .

        echo "MCP Neo4j Memory server installed. Container ready for kubectl exec."
        # Keep container running
        sleep infinity
      command:
      - /bin/bash
      - -c
      env:
      - name: NEO4J_URI
        value: bolt://neo4j-bolt.neo4j:7687
      - name: NEO4J_USERNAME
        valueFrom:
          secretKeyRef:
            key: NEO4J_USERNAME
            name: eventtrader-secrets
      - name: NEO4J_PASSWORD
        valueFrom:
          secretKeyRef:
            key: NEO4J_PASSWORD
            name: eventtrader-secrets
      - name: NEO4J_DATABASE
        value: neo4j
      - name: PYTHONUNBUFFERED
        value: "1"
      image: python:3.11-slim
      imagePullPolicy: IfNotPresent
      name: mcp-neo4j-memory
      resources:
        limits:
          cpu: 250m
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 512Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /source
        name: source-code
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4kgdj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: minisforum
    nodeSelector:
      kubernetes.io/hostname: minisforum
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoSchedule
      key: dedicated
      operator: Equal
      value: graph
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
        type: Directory
      name: source-code
    - name: kube-api-access-4kgdj
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:15:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:07:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:15:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:15:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:07:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1676f0656bafc4cf732419eb80151904e106cf98fd44d911a45e337782039250
      image: docker.io/library/python:3.11-slim
      imageID: docker.io/library/python@sha256:139020233cc412efe4c8135b0efe1c7569dc8b28ddd88bddb109b764f8977e30
      lastState:
        terminated:
          containerID: containerd://2dc99e3015882c86d9bd699d0a319127f8ef3e436fa7c1637ebaa2b4671080f9
          exitCode: 255
          finishedAt: "2025-07-07T04:15:44Z"
          reason: Unknown
          startedAt: "2025-07-07T04:07:14Z"
      name: mcp-neo4j-memory
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-07-07T04:15:58Z"
    hostIP: 192.168.40.73
    hostIPs:
    - ip: 192.168.40.73
    phase: Running
    podIP: 10.244.0.251
    podIPs:
    - ip: 10.244.0.251
    qosClass: Burstable
    startTime: "2025-07-07T04:07:14Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"mcp-neo4j-cypher"},"name":"mcp-neo4j-cypher","namespace":"mcp-services"},"spec":{"ports":[{"port":3000,"protocol":"TCP","targetPort":3000}],"selector":{"app":"mcp-neo4j-cypher"},"type":"ClusterIP"}}
    creationTimestamp: "2025-07-06T05:42:53Z"
    labels:
      app: mcp-neo4j-cypher
    name: mcp-neo4j-cypher
    namespace: mcp-services
    resourceVersion: "5648549"
    uid: a10b9c97-2031-4bb8-bda1-0f2834875107
  spec:
    clusterIP: 10.108.7.25
    clusterIPs:
    - 10.108.7.25
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: mcp-neo4j-cypher
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"mcp-neo4j-memory"},"name":"mcp-neo4j-memory","namespace":"mcp-services"},"spec":{"ports":[{"port":3001,"protocol":"TCP","targetPort":3001}],"selector":{"app":"mcp-neo4j-memory"},"type":"ClusterIP"}}
    creationTimestamp: "2025-07-06T05:42:58Z"
    labels:
      app: mcp-neo4j-memory
    name: mcp-neo4j-memory
    namespace: mcp-services
    resourceVersion: "5648578"
    uid: a7f4c4e3-097b-4c1c-a43d-5e5dea5f69c6
  spec:
    clusterIP: 10.98.141.17
    clusterIPs:
    - 10.98.141.17
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 3001
      protocol: TCP
      targetPort: 3001
    selector:
      app: mcp-neo4j-memory
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "12"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"mcp-neo4j-cypher"},"name":"mcp-neo4j-cypher","namespace":"mcp-services"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"mcp-neo4j-cypher"}},"template":{"metadata":{"labels":{"app":"mcp-neo4j-cypher"}},"spec":{"containers":[{"args":["cd /source\necho \"Installing dependencies...\"\npip install --no-cache-dir 'neo4j\u003e=5.26.0' 'mcp[cli]\u003e=1.6.0'\npip install -e .\n\necho \"MCP Neo4j Cypher server installed. Container ready for kubectl exec.\"\n# Keep container running\nsleep infinity\n"],"command":["/bin/bash","-c"],"env":[{"name":"NEO4J_URI","value":"bolt://neo4j-bolt.neo4j:7687"},{"name":"NEO4J_USERNAME","valueFrom":{"secretKeyRef":{"key":"NEO4J_USERNAME","name":"eventtrader-secrets"}}},{"name":"NEO4J_PASSWORD","valueFrom":{"secretKeyRef":{"key":"NEO4J_PASSWORD","name":"eventtrader-secrets"}}},{"name":"NEO4J_DATABASE","value":"neo4j"},{"name":"PYTHONUNBUFFERED","value":"1"}],"image":"python:3.11-slim","name":"mcp-neo4j-cypher","resources":{"limits":{"cpu":"250m","memory":"512Mi"},"requests":{"cpu":"100m","memory":"256Mi"}},"volumeMounts":[{"mountPath":"/source","name":"source-code"}]}],"nodeSelector":{"kubernetes.io/hostname":"minisforum"},"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/control-plane","operator":"Exists"},{"effect":"NoSchedule","key":"dedicated","operator":"Equal","value":"graph"}],"volumes":[{"hostPath":{"path":"/home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher","type":"Directory"},"name":"source-code"}]}}}}
    creationTimestamp: "2025-07-06T20:48:54Z"
    generation: 12
    labels:
      app: mcp-neo4j-cypher
    name: mcp-neo4j-cypher
    namespace: mcp-services
    resourceVersion: "5827912"
    uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
      spec:
        containers:
        - args:
          - |-
            set -e
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Cypher server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: python:3.11-slim
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-06T20:48:55Z"
      lastUpdateTime: "2025-07-07T03:47:22Z"
      message: ReplicaSet "mcp-neo4j-cypher-79fc6cf54b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-07-07T04:07:14Z"
      lastUpdateTime: "2025-07-07T04:07:14Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 12
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "12"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"mcp-neo4j-memory"},"name":"mcp-neo4j-memory","namespace":"mcp-services"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"mcp-neo4j-memory"}},"template":{"metadata":{"labels":{"app":"mcp-neo4j-memory"}},"spec":{"containers":[{"args":["cd /source\necho \"Installing dependencies...\"\npip install --no-cache-dir 'neo4j\u003e=5.26.0' 'mcp[cli]\u003e=1.6.0'\npip install -e .\n\necho \"MCP Neo4j Memory server installed. Container ready for kubectl exec.\"\n# Keep container running\nsleep infinity\n"],"command":["/bin/bash","-c"],"env":[{"name":"NEO4J_URI","value":"bolt://neo4j-bolt.neo4j:7687"},{"name":"NEO4J_USERNAME","valueFrom":{"secretKeyRef":{"key":"NEO4J_USERNAME","name":"eventtrader-secrets"}}},{"name":"NEO4J_PASSWORD","valueFrom":{"secretKeyRef":{"key":"NEO4J_PASSWORD","name":"eventtrader-secrets"}}},{"name":"NEO4J_DATABASE","value":"neo4j"},{"name":"PYTHONUNBUFFERED","value":"1"}],"image":"python:3.11-slim","name":"mcp-neo4j-memory","resources":{"limits":{"cpu":"250m","memory":"1Gi"},"requests":{"cpu":"100m","memory":"512Mi"}},"volumeMounts":[{"mountPath":"/source","name":"source-code"}]}],"nodeSelector":{"kubernetes.io/hostname":"minisforum"},"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/control-plane","operator":"Exists"},{"effect":"NoSchedule","key":"dedicated","operator":"Equal","value":"graph"}],"volumes":[{"hostPath":{"path":"/home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory","type":"Directory"},"name":"source-code"}]}}}}
    creationTimestamp: "2025-07-06T20:48:55Z"
    generation: 12
    labels:
      app: mcp-neo4j-memory
    name: mcp-neo4j-memory
    namespace: mcp-services
    resourceVersion: "5827911"
    uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: mcp-neo4j-memory
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
      spec:
        containers:
        - args:
          - |-
            set -e
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Memory server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: python:3.11-slim
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-06T20:48:55Z"
      lastUpdateTime: "2025-07-07T03:47:29Z"
      message: ReplicaSet "mcp-neo4j-memory-7f8c5d7459" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-07-07T04:07:14Z"
      lastUpdateTime: "2025-07-07T04:07:14Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 12
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "8"
    creationTimestamp: "2025-07-07T02:34:30Z"
    generation: 3
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: 5599cf9957
    name: mcp-neo4j-cypher-5599cf9957
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-cypher
      uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
    resourceVersion: "5815622"
    uid: 06d414a4-6a2e-442e-9e20-1935e3e4d9cc
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
        pod-template-hash: 5599cf9957
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
          pod-template-hash: 5599cf9957
      spec:
        containers:
        - args:
          - |-
            echo "MCP Neo4j Cypher server ready (pre-built image)."
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: faisalanjum/mcp-neo4j-cypher:latest
          imagePullPolicy: Never
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    observedGeneration: 3
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
    creationTimestamp: "2025-07-07T02:16:16Z"
    generation: 2
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: 59f6d5c4dc
    name: mcp-neo4j-cypher-59f6d5c4dc
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-cypher
      uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
    resourceVersion: "5816614"
    uid: 0f68ff83-1db6-4218-ac2a-822c8e722786
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
        pod-template-hash: 59f6d5c4dc
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
          pod-template-hash: 59f6d5c4dc
      spec:
        containers:
        - args:
          - |-
            set -e
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Cypher server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: mcp/neo4j-cypher:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "11"
    creationTimestamp: "2025-07-07T03:47:05Z"
    generation: 2
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: 5f4d84d9fb
    name: mcp-neo4j-cypher-5f4d84d9fb
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-cypher
      uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
    resourceVersion: "5825267"
    uid: cbcedb83-99a6-47c6-85f6-0633c9a195d3
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
        pod-template-hash: 5f4d84d9fb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
          pod-template-hash: 5f4d84d9fb
      spec:
        containers:
        - args:
          - |-
            echo "MCP Neo4j Cypher server ready (pre-built image)."
            cd /source
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: python:3.11-slim
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      deployment.kubernetes.io/revision-history: "2"
    creationTimestamp: "2025-07-07T02:09:02Z"
    generation: 2
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: 68c474f97
    name: mcp-neo4j-cypher-68c474f97
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-cypher
      uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
    resourceVersion: "5813012"
    uid: 75764f8f-d427-4621-959f-dcee612b0269
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
        pod-template-hash: 68c474f97
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
          pod-template-hash: 68c474f97
      spec:
        containers:
        - args:
          - |
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Cypher server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: mcp/neo4j-cypher:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "9"
      deployment.kubernetes.io/revision-history: "7"
    creationTimestamp: "2025-07-07T02:33:55Z"
    generation: 5
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: 6c5fc779d8
    name: mcp-neo4j-cypher-6c5fc779d8
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-cypher
      uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
    resourceVersion: "5816520"
    uid: a996fee9-98c8-4cba-807b-1cc5f94f2d1a
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
        pod-template-hash: 6c5fc779d8
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
          pod-template-hash: 6c5fc779d8
      spec:
        containers:
        - args:
          - |-
            echo "MCP Neo4j Cypher server ready (pre-built image)."
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: faisalanjum/mcp-neo4j-cypher:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    observedGeneration: 5
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
    creationTimestamp: "2025-07-07T02:33:41Z"
    generation: 2
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: 746c459fb7
    name: mcp-neo4j-cypher-746c459fb7
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-cypher
      uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
    resourceVersion: "5815365"
    uid: 4095de29-cbb9-4bd1-bfda-4889d0576872
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
        pod-template-hash: 746c459fb7
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
          pod-template-hash: 746c459fb7
      spec:
        containers:
        - args:
          - |-
            set -e
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Cypher server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: faisalanjum/mcp-neo4j-cypher:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "10"
    creationTimestamp: "2025-07-07T02:40:10Z"
    generation: 3
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: 7476f9cbc
    name: mcp-neo4j-cypher-7476f9cbc
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-cypher
      uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
    resourceVersion: "5825171"
    uid: 16dd8522-549f-4657-a573-0bbbf1e7b8d9
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
        pod-template-hash: 7476f9cbc
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
          pod-template-hash: 7476f9cbc
      spec:
        containers:
        - args:
          - |-
            echo "MCP Neo4j Cypher server ready (pre-built image)."
            cd /source
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: faisalanjum/mcp-neo4j-cypher:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    observedGeneration: 3
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "12"
    creationTimestamp: "2025-07-07T03:47:21Z"
    generation: 1
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: 79fc6cf54b
    name: mcp-neo4j-cypher-79fc6cf54b
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-cypher
      uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
    resourceVersion: "5827910"
    uid: 45cb812c-7124-4a2a-8199-237d072f0070
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
        pod-template-hash: 79fc6cf54b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
          pod-template-hash: 79fc6cf54b
      spec:
        containers:
        - args:
          - |-
            set -e
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Cypher server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: python:3.11-slim
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2025-07-07T02:09:14Z"
    generation: 2
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: 9cd64fc4b
    name: mcp-neo4j-cypher-9cd64fc4b
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-cypher
      uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
    resourceVersion: "5812135"
    uid: 28e91186-2fca-47d4-b9c2-b323a73ab3c0
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
        pod-template-hash: 9cd64fc4b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
          pod-template-hash: 9cd64fc4b
      spec:
        containers:
        - args:
          - sh
          - -c
          - mcp-neo4j-cypher --db-url ${NEO4J_URI} --username ${NEO4J_USERNAME} --password
            ${NEO4J_PASSWORD}
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: mcp/neo4j-cypher:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-06T20:48:55Z"
    generation: 2
    labels:
      app: mcp-neo4j-cypher
      pod-template-hash: ffbc7d888
    name: mcp-neo4j-cypher-ffbc7d888
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-cypher
      uid: 7ecea0dc-f3e5-446f-9533-18360eee4994
    resourceVersion: "5811951"
    uid: 6a784ec4-3222-4712-8bec-b82bc93f8905
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-cypher
        pod-template-hash: ffbc7d888
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-cypher
          pod-template-hash: ffbc7d888
      spec:
        containers:
        - args:
          - |
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Cypher server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: python:3.11-slim
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-cypher
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-cypher
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
    creationTimestamp: "2025-07-07T02:33:46Z"
    generation: 2
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 577499cd54
    name: mcp-neo4j-memory-577499cd54
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-memory
      uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
    resourceVersion: "5815422"
    uid: 46abd5f0-1ca4-4e1a-93d6-59ca0de6f9f4
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-memory
        pod-template-hash: 577499cd54
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
          pod-template-hash: 577499cd54
      spec:
        containers:
        - args:
          - |-
            set -e
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Memory server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: faisalanjum/mcp-neo4j-memory:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "10"
    creationTimestamp: "2025-07-07T02:40:19Z"
    generation: 3
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 58f64b8b
    name: mcp-neo4j-memory-58f64b8b
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-memory
      uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
    resourceVersion: "5825214"
    uid: 466207b2-0874-4441-b866-c97cda992dec
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-memory
        pod-template-hash: 58f64b8b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
          pod-template-hash: 58f64b8b
      spec:
        containers:
        - args:
          - |-
            echo "MCP Neo4j Memory server ready (pre-built image)."
            cd /source
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: faisalanjum/mcp-neo4j-memory:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    observedGeneration: 3
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "11"
    creationTimestamp: "2025-07-07T03:47:11Z"
    generation: 2
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 59dd8555b9
    name: mcp-neo4j-memory-59dd8555b9
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-memory
      uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
    resourceVersion: "5825316"
    uid: 6fc8fa88-e9c9-4e8c-8965-433fde9f0f66
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-memory
        pod-template-hash: 59dd8555b9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
          pod-template-hash: 59dd8555b9
      spec:
        containers:
        - args:
          - |-
            echo "MCP Neo4j Memory server ready (pre-built image)."
            cd /source
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: python:3.11-slim
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-06T20:48:55Z"
    generation: 2
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 64b568fb7c
    name: mcp-neo4j-memory-64b568fb7c
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-memory
      uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
    resourceVersion: "5811979"
    uid: 7ac7178f-f509-479a-8582-dcf031b03700
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-memory
        pod-template-hash: 64b568fb7c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
          pod-template-hash: 64b568fb7c
      spec:
        containers:
        - args:
          - |
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Memory server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: python:3.11-slim
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2025-07-07T02:09:21Z"
    generation: 2
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 68488877cf
    name: mcp-neo4j-memory-68488877cf
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-memory
      uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
    resourceVersion: "5812162"
    uid: 1e413782-81b3-4f3e-8ce0-fb8542836876
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-memory
        pod-template-hash: 68488877cf
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
          pod-template-hash: 68488877cf
      spec:
        containers:
        - args:
          - sh
          - -c
          - mcp-neo4j-memory --db-url ${NEO4J_URI} --username ${NEO4J_USERNAME} --password
            ${NEO4J_PASSWORD}
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: mcp/neo4j-memory:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      deployment.kubernetes.io/revision-history: "2"
    creationTimestamp: "2025-07-07T02:09:07Z"
    generation: 2
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 6f95cffc6
    name: mcp-neo4j-memory-6f95cffc6
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-memory
      uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
    resourceVersion: "5813063"
    uid: aaad4c5f-3133-43d0-a88f-1f2c3be0fcea
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-memory
        pod-template-hash: 6f95cffc6
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
          pod-template-hash: 6f95cffc6
      spec:
        containers:
        - args:
          - |
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Memory server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: mcp/neo4j-memory:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "9"
      deployment.kubernetes.io/revision-history: "7"
    creationTimestamp: "2025-07-07T02:34:01Z"
    generation: 5
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 7799b894bf
    name: mcp-neo4j-memory-7799b894bf
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-memory
      uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
    resourceVersion: "5816571"
    uid: 611e94fa-4b44-43c2-8912-4052a4b9a0f3
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-memory
        pod-template-hash: 7799b894bf
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
          pod-template-hash: 7799b894bf
      spec:
        containers:
        - args:
          - |-
            echo "MCP Neo4j Memory server ready (pre-built image)."
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: faisalanjum/mcp-neo4j-memory:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    observedGeneration: 5
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "8"
    creationTimestamp: "2025-07-07T02:34:35Z"
    generation: 3
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 787cb97cfd
    name: mcp-neo4j-memory-787cb97cfd
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-memory
      uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
    resourceVersion: "5815671"
    uid: f2d04980-da26-4455-843b-0ac81f890b9e
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-memory
        pod-template-hash: 787cb97cfd
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
          pod-template-hash: 787cb97cfd
      spec:
        containers:
        - args:
          - |-
            echo "MCP Neo4j Memory server ready (pre-built image)."
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: faisalanjum/mcp-neo4j-memory:latest
          imagePullPolicy: Never
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    observedGeneration: 3
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "12"
    creationTimestamp: "2025-07-07T03:47:27Z"
    generation: 1
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 7f8c5d7459
    name: mcp-neo4j-memory-7f8c5d7459
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-memory
      uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
    resourceVersion: "5827906"
    uid: e3201768-0ac3-4a16-b60b-256c4cef7531
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mcp-neo4j-memory
        pod-template-hash: 7f8c5d7459
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
          pod-template-hash: 7f8c5d7459
      spec:
        containers:
        - args:
          - |-
            set -e
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Memory server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: python:3.11-slim
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
    creationTimestamp: "2025-07-07T02:16:26Z"
    generation: 2
    labels:
      app: mcp-neo4j-memory
      pod-template-hash: 7fc85cb8cd
    name: mcp-neo4j-memory-7fc85cb8cd
    namespace: mcp-services
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mcp-neo4j-memory
      uid: 85a85f63-82dc-4902-924d-ecce96f9d0a4
    resourceVersion: "5816636"
    uid: 6f2ac84e-e51a-4da5-bf8c-95f450951179
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: mcp-neo4j-memory
        pod-template-hash: 7fc85cb8cd
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mcp-neo4j-memory
          pod-template-hash: 7fc85cb8cd
      spec:
        containers:
        - args:
          - |-
            set -e
            cd /source
            echo "Installing dependencies..."
            pip install --no-cache-dir 'neo4j>=5.26.0' 'mcp[cli]>=1.6.0'
            pip install -e .

            echo "MCP Neo4j Memory server installed. Container ready for kubectl exec."
            # Keep container running
            sleep infinity
          command:
          - /bin/bash
          - -c
          env:
          - name: NEO4J_URI
            value: bolt://neo4j-bolt.neo4j:7687
          - name: NEO4J_USERNAME
            valueFrom:
              secretKeyRef:
                key: NEO4J_USERNAME
                name: eventtrader-secrets
          - name: NEO4J_PASSWORD
            valueFrom:
              secretKeyRef:
                key: NEO4J_PASSWORD
                name: eventtrader-secrets
          - name: NEO4J_DATABASE
            value: neo4j
          - name: PYTHONUNBUFFERED
            value: "1"
          image: mcp/neo4j-memory:latest
          imagePullPolicy: IfNotPresent
          name: mcp-neo4j-memory
          resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /source
            name: source-code
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: graph
        volumes:
        - hostPath:
            path: /home/faisal/neo4j-mcp-server/servers/mcp-neo4j-memory
            type: Directory
          name: source-code
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIaOY0eeh3THAwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNTA1MTUwOTA4MzZaFw0zNTA1MTMwOTEzMzZaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQD2nCL3wme9/hJqrteQ+SJoj1c0Qj6QiHf2WFmI2f2++/+YQauJ/Sq3o/wg
      NOd7oVwAimcGXk6avwezvE8yrkMscJkL0YF0xr1P76iDwBcVZn4Qo4MPGGfZMqTi
      6d4qKpgyzgJQ9RA90zQ20KYKCiqpsbo04giAzb7pardVBmESbq2OjEk4Or/wDohZ
      3jUXPUE5BtrvsLL8f/v9OGfjUKWgbjBj/w0h70TR6Tj6exf63lHL3Y18tV8khL2j
      c3OhF0T0/nbAOM0WSCkJ5xuByBxreuaoN6My+0L1qbFWnZVyJZnsVt2RP6KgvwBl
      aauXeZQRi5z9ZPo8t1zlub226EHTAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQYwB3Ej5rUcdz48IMKyQZrLn+iezAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQClELZiPs/n
      wiIPhfWoo5EaNSj5lR55LmuSj95LS/3cueEMzEsRNK0ATE/NrWvxkHeiBMtFFsa6
      nRco4YfRCs5acjbHfkzQeqj0ZjUXIZzy+QJxfUzJkwEEO54SNAckADXsFPVfkuN6
      9iznfFJLih/bwylJ5XVisdFxmcLFEs/fwqbjL2UoKI2nAglPTqzCDSJe7LwLvx9G
      9xT6EAZVE/+KW8KaLqB3WbomVvuvFz6oUa7ryEotQGxXi197YK5O3MFmAgLcLbvs
      quOC4Zos299t2C6OSas3Px39jQ2hcPFACrDBW7zTSS5x7dT7apIcCBqP8liXrKUx
      ewHy+dCV4GTO
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-06T05:37:17Z"
    name: kube-root-ca.crt
    namespace: mcp-services
    resourceVersion: "5647824"
    uid: 95043ff7-6d75-4656-b85e-3cf1316b7bc6
- apiVersion: v1
  data:
    __init__.py: '# MCP Servers for EventMarketDB'
    neo4j_cypher_server.py: "#!/usr/bin/env python3\n\"\"\"\nMCP Server for Neo4j
      Cypher queries\nProvides an interface to execute Cypher queries against the
      Neo4j database\n\"\"\"\n\nimport os\nimport asyncio\nfrom typing import Any,
      Dict, List\nfrom mcp.server import Server\nfrom mcp.server.models import InitializationOptions\nfrom
      mcp.types import Tool, TextContent, CallToolResult\nfrom neo4j import AsyncGraphDatabase\nimport
      json\n\n# Neo4j connection settings from environment\nNEO4J_URI = os.getenv(\"NEO4J_URI\",
      \"bolt://neo4j-bolt.neo4j:7687\")\nNEO4J_USERNAME = os.getenv(\"NEO4J_USERNAME\",
      \"neo4j\")\nNEO4J_PASSWORD = os.getenv(\"NEO4J_PASSWORD\", \"\")\n\n\nclass
      Neo4jCypherServer:\n    def __init__(self):\n        self.server = Server(\"neo4j-cypher\")\n
      \       self.driver = None\n        \n        # Register handlers\n        self.server.list_tools
      = self.list_tools\n        self.server.call_tool = self.call_tool\n        \n
      \   async def initialize(self):\n        \"\"\"Initialize Neo4j connection\"\"\"\n
      \       self.driver = AsyncGraphDatabase.driver(\n            NEO4J_URI,\n            auth=(NEO4J_USERNAME,
      NEO4J_PASSWORD)\n        )\n        \n    async def cleanup(self):\n        \"\"\"Cleanup
      Neo4j connection\"\"\"\n        if self.driver:\n            await self.driver.close()\n
      \           \n    async def list_tools(self) -> List[Tool]:\n        \"\"\"List
      available tools\"\"\"\n        return [\n            Tool(\n                name=\"execute_cypher\",\n
      \               description=\"Execute a Cypher query against the Neo4j database\",\n
      \               input_schema={\n                    \"type\": \"object\",\n
      \                   \"properties\": {\n                        \"query\": {\n
      \                           \"type\": \"string\",\n                            \"description\":
      \"The Cypher query to execute\"\n                        },\n                        \"parameters\":
      {\n                            \"type\": \"object\",\n                            \"description\":
      \"Parameters for the Cypher query\",\n                            \"default\":
      {}\n                        }\n                    },\n                    \"required\":
      [\"query\"]\n                }\n            ),\n            Tool(\n                name=\"get_schema\",\n
      \               description=\"Get the current Neo4j database schema\",\n                input_schema={\n
      \                   \"type\": \"object\",\n                    \"properties\":
      {}\n                }\n            )\n        ]\n        \n    async def call_tool(self,
      name: str, arguments: Dict[str, Any]) -> List[CallToolResult]:\n        \"\"\"Execute
      a tool\"\"\"\n        if name == \"execute_cypher\":\n            return await
      self.execute_cypher(\n                arguments.get(\"query\", \"\"),\n                arguments.get(\"parameters\",
      {})\n            )\n        elif name == \"get_schema\":\n            return
      await self.get_schema()\n        else:\n            return [CallToolResult(\n
      \               content=[TextContent(text=f\"Unknown tool: {name}\")],\n                is_error=True\n
      \           )]\n            \n    async def execute_cypher(self, query: str,
      parameters: Dict[str, Any]) -> List[CallToolResult]:\n        \"\"\"Execute
      a Cypher query\"\"\"\n        try:\n            async with self.driver.session()
      as session:\n                result = await session.run(query, parameters)\n
      \               records = [record.data() async for record in result]\n                \n
      \               return [CallToolResult(\n                    content=[TextContent(\n
      \                       text=json.dumps({\n                            \"success\":
      True,\n                            \"records\": records,\n                            \"count\":
      len(records)\n                        }, indent=2, default=str)\n                    )]\n
      \               )]\n        except Exception as e:\n            return [CallToolResult(\n
      \               content=[TextContent(\n                    text=json.dumps({\n
      \                       \"success\": False,\n                        \"error\":
      str(e)\n                    }, indent=2)\n                )],\n                is_error=True\n
      \           )]\n            \n    async def get_schema(self) -> List[CallToolResult]:\n
      \       \"\"\"Get database schema\"\"\"\n        try:\n            async with
      self.driver.session() as session:\n                # Get node labels\n                labels_result
      = await session.run(\"CALL db.labels()\")\n                labels = [record[\"label\"]
      async for record in labels_result]\n                \n                # Get
      relationship types\n                rels_result = await session.run(\"CALL db.relationshipTypes()\")\n
      \               relationships = [record[\"relationshipType\"] async for record
      in rels_result]\n                \n                # Get indexes\n                indexes_result
      = await session.run(\"SHOW INDEXES\")\n                indexes = [record.data()
      async for record in indexes_result]\n                \n                return
      [CallToolResult(\n                    content=[TextContent(\n                        text=json.dumps({\n
      \                           \"success\": True,\n                            \"labels\":
      labels,\n                            \"relationships\": relationships,\n                            \"indexes\":
      indexes\n                        }, indent=2, default=str)\n                    )]\n
      \               )]\n        except Exception as e:\n            return [CallToolResult(\n
      \               content=[TextContent(\n                    text=json.dumps({\n
      \                       \"success\": False,\n                        \"error\":
      str(e)\n                    }, indent=2)\n                )],\n                is_error=True\n
      \           )]\n\n\nasync def main():\n    \"\"\"Main entry point\"\"\"\n    import
      sys\n    from mcp.server.stdio import stdio_server\n    \n    server = Neo4jCypherServer()\n
      \   \n    # Initialize Neo4j connection\n    await server.initialize()\n    \n
      \   try:\n        # Run the MCP server with stdio\n        async with stdio_server()
      as (read_stream, write_stream):\n            await server.server.run(\n                read_stream=read_stream,\n
      \               write_stream=write_stream,\n                initialization_options=InitializationOptions(\n
      \                   server_name=\"neo4j-cypher\",\n                    server_version=\"1.0.0\",\n
      \                   capabilities={}\n                )\n            )\n    finally:\n
      \       await server.cleanup()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"
    neo4j_memory_server.py: "#!/usr/bin/env python3\n\"\"\"\nMCP Server for Neo4j
      Memory operations\nProvides memory/caching capabilities for Neo4j data\n\"\"\"\n\nimport
      os\nimport asyncio\nfrom typing import Any, Dict, List, Optional\nfrom mcp.server
      import Server\nfrom mcp.server.models import InitializationOptions\nfrom mcp.types
      import Tool, TextContent, CallToolResult\nfrom neo4j import AsyncGraphDatabase\nimport
      json\nfrom datetime import datetime\nfrom collections import defaultdict\n\n\n#
      Neo4j connection settings from environment\nNEO4J_URI = os.getenv(\"NEO4J_URI\",
      \"bolt://neo4j-bolt.neo4j:7687\")\nNEO4J_USERNAME = os.getenv(\"NEO4J_USERNAME\",
      \"neo4j\")\nNEO4J_PASSWORD = os.getenv(\"NEO4J_PASSWORD\", \"\")\n\n\nclass
      Neo4jMemoryServer:\n    def __init__(self):\n        self.server = Server(\"neo4j-memory\")\n
      \       self.driver = None\n        self.memory_store = defaultdict(dict)  #
      In-memory cache\n        \n        # Register handlers\n        self.server.list_tools
      = self.list_tools\n        self.server.call_tool = self.call_tool\n        \n
      \   async def initialize(self):\n        \"\"\"Initialize Neo4j connection\"\"\"\n
      \       self.driver = AsyncGraphDatabase.driver(\n            NEO4J_URI,\n            auth=(NEO4J_USERNAME,
      NEO4J_PASSWORD)\n        )\n        \n    async def cleanup(self):\n        \"\"\"Cleanup
      Neo4j connection\"\"\"\n        if self.driver:\n            await self.driver.close()\n
      \           \n    async def list_tools(self) -> List[Tool]:\n        \"\"\"List
      available tools\"\"\"\n        return [\n            Tool(\n                name=\"cache_query\",\n
      \               description=\"Cache the results of a Cypher query\",\n                input_schema={\n
      \                   \"type\": \"object\",\n                    \"properties\":
      {\n                        \"key\": {\n                            \"type\":
      \"string\",\n                            \"description\": \"Cache key for storing
      the results\"\n                        },\n                        \"query\":
      {\n                            \"type\": \"string\",\n                            \"description\":
      \"The Cypher query to execute and cache\"\n                        },\n                        \"parameters\":
      {\n                            \"type\": \"object\",\n                            \"description\":
      \"Parameters for the Cypher query\",\n                            \"default\":
      {}\n                        },\n                        \"ttl\": {\n                            \"type\":
      \"integer\",\n                            \"description\": \"Time to live in
      seconds (default: 3600)\",\n                            \"default\": 3600\n
      \                       }\n                    },\n                    \"required\":
      [\"key\", \"query\"]\n                }\n            ),\n            Tool(\n
      \               name=\"get_cached\",\n                description=\"Retrieve
      cached query results\",\n                input_schema={\n                    \"type\":
      \"object\",\n                    \"properties\": {\n                        \"key\":
      {\n                            \"type\": \"string\",\n                            \"description\":
      \"Cache key to retrieve\"\n                        }\n                    },\n
      \                   \"required\": [\"key\"]\n                }\n            ),\n
      \           Tool(\n                name=\"invalidate_cache\",\n                description=\"Invalidate
      cached entries\",\n                input_schema={\n                    \"type\":
      \"object\",\n                    \"properties\": {\n                        \"pattern\":
      {\n                            \"type\": \"string\",\n                            \"description\":
      \"Pattern to match cache keys (supports wildcards)\",\n                            \"default\":
      \"*\"\n                        }\n                    }\n                }\n
      \           ),\n            Tool(\n                name=\"get_node_summary\",\n
      \               description=\"Get a summary of nodes by label with caching\",\n
      \               input_schema={\n                    \"type\": \"object\",\n
      \                   \"properties\": {\n                        \"labels\": {\n
      \                           \"type\": \"array\",\n                            \"items\":
      {\"type\": \"string\"},\n                            \"description\": \"List
      of node labels to summarize\"\n                        }\n                    }\n
      \               }\n            )\n        ]\n        \n    async def call_tool(self,
      name: str, arguments: Dict[str, Any]) -> List[CallToolResult]:\n        \"\"\"Execute
      a tool\"\"\"\n        if name == \"cache_query\":\n            return await
      self.cache_query(\n                arguments.get(\"key\", \"\"),\n                arguments.get(\"query\",
      \"\"),\n                arguments.get(\"parameters\", {}),\n                arguments.get(\"ttl\",
      3600)\n            )\n        elif name == \"get_cached\":\n            return
      await self.get_cached(arguments.get(\"key\", \"\"))\n        elif name == \"invalidate_cache\":\n
      \           return await self.invalidate_cache(arguments.get(\"pattern\", \"*\"))\n
      \       elif name == \"get_node_summary\":\n            return await self.get_node_summary(arguments.get(\"labels\",
      []))\n        else:\n            return [CallToolResult(\n                content=[TextContent(text=f\"Unknown
      tool: {name}\")],\n                is_error=True\n            )]\n            \n
      \   async def cache_query(self, key: str, query: str, parameters: Dict[str,
      Any], ttl: int) -> List[CallToolResult]:\n        \"\"\"Execute and cache a
      query\"\"\"\n        try:\n            async with self.driver.session() as session:\n
      \               result = await session.run(query, parameters)\n                records
      = [record.data() async for record in result]\n                \n                #
      Store in cache with metadata\n                self.memory_store[key] = {\n                    \"data\":
      records,\n                    \"timestamp\": datetime.utcnow().isoformat(),\n
      \                   \"ttl\": ttl,\n                    \"query\": query,\n                    \"parameters\":
      parameters\n                }\n                \n                return [CallToolResult(\n
      \                   content=[TextContent(\n                        text=json.dumps({\n
      \                           \"success\": True,\n                            \"key\":
      key,\n                            \"records_cached\": len(records),\n                            \"ttl\":
      ttl\n                        }, indent=2)\n                    )]\n                )]\n
      \       except Exception as e:\n            return [CallToolResult(\n                content=[TextContent(\n
      \                   text=json.dumps({\n                        \"success\":
      False,\n                        \"error\": str(e)\n                    }, indent=2)\n
      \               )],\n                is_error=True\n            )]\n            \n
      \   async def get_cached(self, key: str) -> List[CallToolResult]:\n        \"\"\"Retrieve
      cached data\"\"\"\n        if key in self.memory_store:\n            cache_entry
      = self.memory_store[key]\n            \n            # Check if expired\n            cached_time
      = datetime.fromisoformat(cache_entry[\"timestamp\"])\n            age = (datetime.utcnow()
      - cached_time).total_seconds()\n            \n            if age > cache_entry[\"ttl\"]:\n
      \               del self.memory_store[key]\n                return [CallToolResult(\n
      \                   content=[TextContent(\n                        text=json.dumps({\n
      \                           \"success\": False,\n                            \"error\":
      \"Cache entry expired\"\n                        }, indent=2)\n                    )]\n
      \               )]\n            \n            return [CallToolResult(\n                content=[TextContent(\n
      \                   text=json.dumps({\n                        \"success\":
      True,\n                        \"data\": cache_entry[\"data\"],\n                        \"age_seconds\":
      int(age),\n                        \"ttl\": cache_entry[\"ttl\"]\n                    },
      indent=2, default=str)\n                )]\n            )]\n        else:\n
      \           return [CallToolResult(\n                content=[TextContent(\n
      \                   text=json.dumps({\n                        \"success\":
      False,\n                        \"error\": \"Key not found in cache\"\n                    },
      indent=2)\n                )]\n            )]\n            \n    async def invalidate_cache(self,
      pattern: str) -> List[CallToolResult]:\n        \"\"\"Invalidate cache entries
      matching pattern\"\"\"\n        import fnmatch\n        \n        invalidated
      = []\n        keys_to_remove = []\n        \n        for key in self.memory_store:\n
      \           if fnmatch.fnmatch(key, pattern):\n                keys_to_remove.append(key)\n
      \               invalidated.append(key)\n                \n        for key in
      keys_to_remove:\n            del self.memory_store[key]\n            \n        return
      [CallToolResult(\n            content=[TextContent(\n                text=json.dumps({\n
      \                   \"success\": True,\n                    \"invalidated\":
      invalidated,\n                    \"count\": len(invalidated)\n                },
      indent=2)\n            )]\n        )]\n        \n    async def get_node_summary(self,
      labels: List[str]) -> List[CallToolResult]:\n        \"\"\"Get summary of nodes
      by label with caching\"\"\"\n        cache_key = f\"node_summary:{':'.join(sorted(labels))}\"\n
      \       \n        # Try to get from cache first\n        cached_result = await
      self.get_cached(cache_key)\n        if cached_result[0].content[0].text.find('\"success\":
      true') != -1:\n            return cached_result\n            \n        # Otherwise,
      query and cache\n        try:\n            summaries = {}\n            async
      with self.driver.session() as session:\n                for label in labels:\n
      \                   # Get count\n                    count_result = await session.run(\n
      \                       f\"MATCH (n:{label}) RETURN count(n) as count\"\n                    )\n
      \                   count = await count_result.single()\n                    \n
      \                   # Get sample properties\n                    props_result
      = await session.run(\n                        f\"MATCH (n:{label}) RETURN keys(n)
      as props LIMIT 5\"\n                    )\n                    all_props = set()\n
      \                   async for record in props_result:\n                        all_props.update(record[\"props\"])\n
      \                   \n                    summaries[label] = {\n                        \"count\":
      count[\"count\"],\n                        \"properties\": list(all_props)\n
      \                   }\n                    \n            # Cache the results\n
      \           await self.cache_query(cache_key, \"\", {}, 3600)\n            self.memory_store[cache_key][\"data\"]
      = summaries\n            \n            return [CallToolResult(\n                content=[TextContent(\n
      \                   text=json.dumps({\n                        \"success\":
      True,\n                        \"summaries\": summaries\n                    },
      indent=2)\n                )]\n            )]\n        except Exception as e:\n
      \           return [CallToolResult(\n                content=[TextContent(\n
      \                   text=json.dumps({\n                        \"success\":
      False,\n                        \"error\": str(e)\n                    }, indent=2)\n
      \               )],\n                is_error=True\n            )]\n\n\nasync
      def main():\n    \"\"\"Main entry point\"\"\"\n    import sys\n    from mcp.server.stdio
      import stdio_server\n    \n    server = Neo4jMemoryServer()\n    \n    # Initialize
      Neo4j connection\n    await server.initialize()\n    \n    try:\n        # Run
      the MCP server with stdio\n        async with stdio_server() as (read_stream,
      write_stream):\n            await server.server.run(\n                read_stream=read_stream,\n
      \               write_stream=write_stream,\n                initialization_options=InitializationOptions(\n
      \                   server_name=\"neo4j-memory\",\n                    server_version=\"1.0.0\",\n
      \                   capabilities={}\n                )\n            )\n    finally:\n
      \       await server.cleanup()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"
    run_mcp_server.sh: |-
      #!/bin/bash
      # Wrapper script to run MCP servers as long-running services

      SERVER_TYPE=$1

      echo "Starting MCP Server: $SERVER_TYPE"

      # Create a named pipe for input
      mkfifo /tmp/mcp_input

      # Function to keep the pipe open
      keep_pipe_open() {
          while true; do
              sleep 3600
          done > /tmp/mcp_input
      }

      # Start the pipe keeper in background
      keep_pipe_open &
      PIPE_PID=$!

      # Trap to clean up on exit
      trap "kill $PIPE_PID; rm -f /tmp/mcp_input" EXIT

      # Run the MCP server with the pipe as input
      if [ "$SERVER_TYPE" = "cypher" ]; then
          exec python /app/mcp_servers/neo4j_cypher_server.py < /tmp/mcp_input
      elif [ "$SERVER_TYPE" = "memory" ]; then
          exec python /app/mcp_servers/neo4j_memory_server.py < /tmp/mcp_input
      else
          echo "Unknown server type: $SERVER_TYPE"
          exit 1
      fi
  kind: ConfigMap
  metadata:
    creationTimestamp: "2025-07-06T05:56:16Z"
    name: mcp-server-scripts
    namespace: mcp-services
    resourceVersion: "5650993"
    uid: cf89230b-3b7f-4f36-88a6-65f0de7998db
- apiVersion: v1
  data:
    BENZINGACONFERENCE_API_KEY: YnouZmFpMjFmMGU1YzJlYzYwZmMxZmE4MzQ0NDRjZjA0NjY1ZTA0MTc1YTZlODYwY2Q1ZDI3YzlmMDlyZmFpMA==
    BENZINGANEWS_API_KEY: MmQ4NjkxNmI2ZDM5NDU1M2JiMmYyNTg3YjFjZWQ3OTc=
    CHROMADB_SERVER_HOST: aHR0cDovLzE5Mi4xNjguNDAuNzM6MzIwMDA=
    EARNINGS_CALL_API_KEY: cHJlbWl1bV9ZUVpkZEdWSUZTSnM1SVNjZFY2THFB
    NEO4J_PASSWORD: TmV4dDIwMjAj
    NEO4J_URI: Ym9sdDovLzE5Mi4xNjguNDAuNzQ6MzA2ODc=
    NEO4J_USERNAME: bmVvNGo=
    OPENAI_API_KEY: c2stcHJvai1kMDRzMGQ0eGtLSDhBMjg4Y0IwbGlWVlZjazl0bk1wR0RtMHI0eGhyMG9aMjBheWQtYXJMQTMzaWhHTkx3dHcyRklXUV9UVV9pTlQzQmxia0ZKTTBJNjhUOUh4bGczRHBtQXE0RkFkbUVnVW9jMm8xQlJSWWN3cUExU2dwamVhbURTR2w1NVgybG83TGp5NkpCelBuZjhXejBsTUE=
    OPENFIGI_API_KEY: OWExMjQ4NjQtMjMzNC00YTM0LThkMTktMWRmN2ZlZTlhZmQy
    POLYGON_API_KEY: UTBucFlIV19GS3ZTV25ZaGtQVERucGNFdERwa0d1MXM=
    PYTHONPATH: L2hvbWUvZmFpc2FsL0V2ZW50TWFya2V0REI=
    REDIS_HOST: MTkyLjE2OC40MC43Mg==
    REDIS_PORT: MzEzNzk=
    SEC_API_KEY: MDkxNzBiMWM2ODk4ZTkxY2I1ODFkYWE4Yzg2MmU1ZWU2MTMyNDFmMTRlMjcyY2YwMmNiYTg4YjY1NTVkZmU2NQ==
    VOYAGE_API_KEY: cGEtVTNxSHRFR0ZCWFQ5d2xBOTR1MGhidmJvU2ZxeHQ2b2pmdEV6eVJvTDg2UA==
  kind: Secret
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"BENZINGACONFERENCE_API_KEY":"YnouZmFpMjFmMGU1YzJlYzYwZmMxZmE4MzQ0NDRjZjA0NjY1ZTA0MTc1YTZlODYwY2Q1ZDI3YzlmMDlyZmFpMA==","BENZINGANEWS_API_KEY":"MmQ4NjkxNmI2ZDM5NDU1M2JiMmYyNTg3YjFjZWQ3OTc=","CHROMADB_SERVER_HOST":"aHR0cDovLzE5Mi4xNjguNDAuNzM6MzIwMDA=","EARNINGS_CALL_API_KEY":"cHJlbWl1bV9ZUVpkZEdWSUZTSnM1SVNjZFY2THFB","NEO4J_PASSWORD":"TmV4dDIwMjAj","NEO4J_URI":"Ym9sdDovLzE5Mi4xNjguNDAuNzQ6MzA2ODc=","NEO4J_USERNAME":"bmVvNGo=","OPENAI_API_KEY":"c2stcHJvai1kMDRzMGQ0eGtLSDhBMjg4Y0IwbGlWVlZjazl0bk1wR0RtMHI0eGhyMG9aMjBheWQtYXJMQTMzaWhHTkx3dHcyRklXUV9UVV9pTlQzQmxia0ZKTTBJNjhUOUh4bGczRHBtQXE0RkFkbUVnVW9jMm8xQlJSWWN3cUExU2dwamVhbURTR2w1NVgybG83TGp5NkpCelBuZjhXejBsTUE=","OPENFIGI_API_KEY":"OWExMjQ4NjQtMjMzNC00YTM0LThkMTktMWRmN2ZlZTlhZmQy","POLYGON_API_KEY":"UTBucFlIV19GS3ZTV25ZaGtQVERucGNFdERwa0d1MXM=","PYTHONPATH":"L2hvbWUvZmFpc2FsL0V2ZW50TWFya2V0REI=","REDIS_HOST":"MTkyLjE2OC40MC43Mg==","REDIS_PORT":"MzEzNzk=","SEC_API_KEY":"MDkxNzBiMWM2ODk4ZTkxY2I1ODFkYWE4Yzg2MmU1ZWU2MTMyNDFmMTRlMjcyY2YwMmNiYTg4YjY1NTVkZmU2NQ==","VOYAGE_API_KEY":"cGEtVTNxSHRFR0ZCWFQ5d2xBOTR1MGhidmJvU2ZxeHQ2b2pmdEV6eVJvTDg2UA=="},"kind":"Secret","metadata":{"annotations":{},"creationTimestamp":"2025-07-03T10:56:20Z","name":"eventtrader-secrets","namespace":"mcp-services","resourceVersion":"5177926","uid":"982b64c7-f952-45b2-9d35-46feb9bc5607"},"type":"Opaque"}
    creationTimestamp: "2025-07-06T05:40:39Z"
    name: eventtrader-secrets
    namespace: mcp-services
    resourceVersion: "5648250"
    uid: 29851153-8dd6-4fa5-ac0b-37eaa27e333e
  type: Opaque
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      local.path.provisioner/selected-node: minisforum3
      pv.kubernetes.io/bound-by-controller: "yes"
      pv.kubernetes.io/provisioned-by: rancher.io/local-path
    creationTimestamp: "2025-07-03T10:40:09Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-51e8119a-bca0-4c7e-9c1d-8687264fe915
    resourceVersion: "5647067"
    uid: 8bbddbe4-2131-4c8c-b6a6-764b278317a4
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 50Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: logs-neo4j-0
      namespace: neo4j
      resourceVersion: "5647055"
      uid: b8fd9ba3-2222-4cd8-b99f-039db00b2591
    hostPath:
      path: /opt/local-path/pvc-51e8119a-bca0-4c7e-9c1d-8687264fe915_neo4j_logs-neo4j-0
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - minisforum3
    persistentVolumeReclaimPolicy: Retain
    storageClassName: local-path-minisforum3
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-07-06T05:36:10Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      local.path.provisioner/selected-node: minisforum2
      pv.kubernetes.io/provisioned-by: rancher.io/local-path
    creationTimestamp: "2025-07-06T05:36:47Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-51f73d5d-9be3-4e87-91fd-97c3da595674
    resourceVersion: "5647588"
    uid: 5ec67d20-f4bc-4e10-9bad-f8d878b8eb4b
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 100Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: prometheus-prometheus-kube-prometheus-prometheus-db-prometheus-prometheus-kube-prometheus-prometheus-0
      namespace: monitoring
      resourceVersion: "5647438"
      uid: 51f73d5d-9be3-4e87-91fd-97c3da595674
    hostPath:
      path: /opt/local-path-provisioner/pvc-51f73d5d-9be3-4e87-91fd-97c3da595674_monitoring_prometheus-prometheus-kube-prometheus-prometheus-db-prometheus-prometheus-kube-prometheus-prometheus-0
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - minisforum2
    persistentVolumeReclaimPolicy: Delete
    storageClassName: local-path
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-07-06T05:36:47Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      local.path.provisioner/selected-node: minisforum
      pv.kubernetes.io/provisioned-by: rancher.io/local-path
    creationTimestamp: "2025-07-06T05:37:09Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-804a1738-9246-42da-81f5-fe2f5124d49f
    resourceVersion: "5647782"
    uid: d161b405-95c4-4051-8922-37739665a99c
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 50Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: storage-loki-0
      namespace: monitoring
      resourceVersion: "5647755"
      uid: 804a1738-9246-42da-81f5-fe2f5124d49f
    hostPath:
      path: /opt/local-path-provisioner/pvc-804a1738-9246-42da-81f5-fe2f5124d49f_monitoring_storage-loki-0
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - minisforum
    persistentVolumeReclaimPolicy: Delete
    storageClassName: local-path
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-07-06T05:37:09Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      local.path.provisioner/selected-node: minisforum3
      pv.kubernetes.io/bound-by-controller: "yes"
      pv.kubernetes.io/provisioned-by: rancher.io/local-path
    creationTimestamp: "2025-07-03T10:40:09Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-b72a2053-aca5-40f1-8afc-5c423116f619
    resourceVersion: "5647074"
    uid: 37f6c6bf-9420-4685-9485-5f6376ffc90b
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 1536Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: data-neo4j-0
      namespace: neo4j
      resourceVersion: "5647052"
      uid: ad007956-8b64-4192-ab5a-5d4abda007ae
    hostPath:
      path: /opt/local-path/pvc-b72a2053-aca5-40f1-8afc-5c423116f619_neo4j_data-neo4j-0
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - minisforum3
    persistentVolumeReclaimPolicy: Retain
    storageClassName: local-path-minisforum3
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-07-06T05:36:10Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      local.path.provisioner/selected-node: minisforum2
      pv.kubernetes.io/provisioned-by: rancher.io/local-path
    creationTimestamp: "2025-07-06T06:06:05Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-d8ba547a-4892-4d75-aa5a-f5b5b3483187
    resourceVersion: "5652571"
    uid: a9822cea-4d7e-4228-b39d-398746988e28
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 40Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: redis-pvc
      namespace: infrastructure
      resourceVersion: "5652547"
      uid: d8ba547a-4892-4d75-aa5a-f5b5b3483187
    hostPath:
      path: /opt/local-path-provisioner/pvc-d8ba547a-4892-4d75-aa5a-f5b5b3483187_infrastructure_redis-pvc
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - minisforum2
    persistentVolumeReclaimPolicy: Delete
    storageClassName: local-path
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-07-06T06:06:05Z"
    phase: Bound
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: "2025-07-06T05:37:17Z"
    name: default
    namespace: mcp-services
    resourceVersion: "5647823"
    uid: 3fb1110f-442e-4ac2-b03d-6150d71ed0a8
kind: List
metadata:
  resourceVersion: ""
