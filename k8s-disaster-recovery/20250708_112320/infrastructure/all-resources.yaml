apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: f6e212c5ccca6e047b4546e39d56c7336a003fca6936808f64fb2bcb0a1b175b
    creationTimestamp: "2025-07-07T18:58:44Z"
    generateName: nats-
    labels:
      app.kubernetes.io/component: nats
      app.kubernetes.io/instance: nats
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nats
      app.kubernetes.io/version: 2.11.6
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: nats-589bf699
      helm.sh/chart: nats-1.3.9
      statefulset.kubernetes.io/pod-name: nats-0
    name: nats-0
    namespace: infrastructure
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: nats
      uid: 32f23ba9-408b-4c5b-99b0-8af3ea18e185
    resourceVersion: "5959759"
    uid: 812d9ada-7503-492c-8f5c-f00a147a9e65
  spec:
    containers:
    - args:
      - --config
      - /etc/nats-config/nats.conf
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: SERVER_NAME
        value: $(POD_NAME)
      image: nats:2.11.6-alpine
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - nats-server
            - -sl=ldm=/var/run/nats/nats.pid
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz?js-enabled-only=true
          port: monitor
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: nats
      ports:
      - containerPort: 4222
        name: nats
        protocol: TCP
      - containerPort: 8222
        name: monitor
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz?js-server-only=true
          port: monitor
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      startupProbe:
        failureThreshold: 90
        httpGet:
          path: /healthz
          port: monitor
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/nats-config
        name: config
      - mountPath: /var/run/nats
        name: pid
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dp4dc
        readOnly: true
    - args:
      - -pid
      - /var/run/nats/nats.pid
      - -config
      - /etc/nats-config/nats.conf
      image: natsio/nats-server-config-reloader:0.18.2
      imagePullPolicy: IfNotPresent
      name: reloader
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/nats
        name: pid
      - mountPath: /etc/nats-config
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dp4dc
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    hostname: nats-0
    nodeName: minisforum2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    shareProcessNamespace: true
    subdomain: nats-headless
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: nats-config
      name: config
    - emptyDir: {}
      name: pid
    - name: kube-api-access-dp4dc
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T18:58:45Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T18:58:44Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T18:58:55Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T18:58:55Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T18:58:44Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9ba61c9580b9e9edebbb4e8fe508f098ab180d1cd551f8d8fe85f0719f7b907b
      image: docker.io/library/nats:2.11.6-alpine
      imageID: docker.io/library/nats@sha256:c6beb2ccb1910ecaead46588e2f37422c2e3922c7a0cb1930234429579c8443e
      lastState: {}
      name: nats
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-07T18:58:45Z"
    - containerID: containerd://9cb799821f1f151080b935c6d78b30b4a0dee53a3336371dd778996a86ea2375
      image: docker.io/natsio/nats-server-config-reloader:0.18.2
      imageID: docker.io/natsio/nats-server-config-reloader@sha256:bca7e221ec6f1221ecd74e2c13b075c913a5bcd998e87a4da4d747033440ee93
      lastState: {}
      name: reloader
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-07T18:58:45Z"
    hostIP: 192.168.40.72
    hostIPs:
    - ip: 192.168.40.72
    phase: Running
    podIP: 10.244.1.219
    podIPs:
    - ip: 10.244.1.219
    qosClass: BestEffort
    startTime: "2025-07-07T18:58:44Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-07-07T16:46:39Z"
    generateName: nats-box-bfc4fd79f-
    labels:
      app.kubernetes.io/component: nats-box
      app.kubernetes.io/instance: nats
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nats
      app.kubernetes.io/version: 2.11.6
      helm.sh/chart: nats-1.3.9
      pod-template-hash: bfc4fd79f
    name: nats-box-bfc4fd79f-zfbwr
    namespace: infrastructure
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nats-box-bfc4fd79f
      uid: 35d84803-ec12-449c-af8d-e661fa5c35b9
    resourceVersion: "5943203"
    uid: 3633b52e-301f-438c-a044-cebcb495205f
  spec:
    containers:
    - args:
      - sh
      - -ec
      - trap true INT TERM; sleep infinity & wait
      command:
      - sh
      - -ec
      - |
        work_dir="$(pwd)"
        mkdir -p "$XDG_CONFIG_HOME/nats"
        cd "$XDG_CONFIG_HOME/nats"
        if ! [ -s context ]; then
          ln -s /etc/nats-contexts context
        fi
        if ! [ -f context.txt ]; then
          echo -n "default" > context.txt
        fi
        cd "$work_dir"
        exec /entrypoint.sh "$@"
      - --
      image: natsio/nats-box:0.18.0
      imagePullPolicy: IfNotPresent
      name: nats-box
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/nats-contexts
        name: contexts
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ksfz6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: minisforum2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: contexts
      secret:
        defaultMode: 420
        secretName: nats-box-contexts
    - name: kube-api-access-ksfz6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T16:46:40Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T16:46:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T16:46:40Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T16:46:40Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T16:46:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ca7fb1da074e07727a9cea5f7f1635aa4074b24a6092f557a456ffc19e41cc7c
      image: docker.io/natsio/nats-box:0.18.0
      imageID: docker.io/natsio/nats-box@sha256:abdc9f9f0120bb8adfbf674eb037d1551db55356eb198b7bd4ffed377f6950a6
      lastState: {}
      name: nats-box
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-07T16:46:39Z"
    hostIP: 192.168.40.72
    hostIPs:
    - ip: 192.168.40.72
    phase: Running
    podIP: 10.244.1.217
    podIPs:
    - ip: 10.244.1.217
    qosClass: BestEffort
    startTime: "2025-07-07T16:46:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-07-06T06:06:02Z"
    generateName: redis-c689467c5-
    labels:
      app: redis
      pod-template-hash: c689467c5
    name: redis-c689467c5-7vg7w
    namespace: infrastructure
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: redis-c689467c5
      uid: bc30c48a-b121-45b5-af7f-d9b07d094e42
    resourceVersion: "5829307"
    uid: 38804fd0-4207-47f5-8c01-83d54ce6ce45
  spec:
    containers:
    - image: redis:7
      imagePullPolicy: IfNotPresent
      name: redis
      ports:
      - containerPort: 6379
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: redis-data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-whgqv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: minisforum2
    nodeSelector:
      kubernetes.io/hostname: minisforum2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: redis-data
      persistentVolumeClaim:
        claimName: redis-pvc
    - name: kube-api-access-whgqv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:16:43Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-06T06:06:06Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:16:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-07T04:16:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-06T06:06:06Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://07ca4236e9eff767e46d9c0525f491dd6c1b35df0ff31fe02bcb4c4ee64fb54c
      image: docker.io/library/redis:7
      imageID: docker.io/library/redis@sha256:7b5ee51c14cf5febd4adde3a4b6cced72efdf154df7e9a0383163b13e16e9091
      lastState:
        terminated:
          containerID: containerd://f7065215e79e35e1c799b5c00cf402a2f10ac4b26031ebf6bcf192b052d14731
          exitCode: 255
          finishedAt: "2025-07-07T04:14:11Z"
          reason: Unknown
          startedAt: "2025-07-06T23:09:02Z"
      name: redis
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-07-07T04:16:43Z"
    hostIP: 192.168.40.72
    hostIPs:
    - ip: 192.168.40.72
    phase: Running
    podIP: 10.244.1.51
    podIPs:
    - ip: 10.244.1.51
    qosClass: BestEffort
    startTime: "2025-07-06T06:06:06Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: nats
      meta.helm.sh/release-namespace: infrastructure
    creationTimestamp: "2025-07-06T05:35:38Z"
    labels:
      app.kubernetes.io/component: nats
      app.kubernetes.io/instance: nats
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nats
      app.kubernetes.io/version: 2.11.6
      helm.sh/chart: nats-1.3.9
    name: nats
    namespace: infrastructure
    resourceVersion: "5646924"
    uid: 820bb37f-859b-45f6-b993-6effbafcb35a
  spec:
    clusterIP: 10.107.38.43
    clusterIPs:
    - 10.107.38.43
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: tcp
      name: nats
      port: 4222
      protocol: TCP
      targetPort: nats
    selector:
      app.kubernetes.io/component: nats
      app.kubernetes.io/instance: nats
      app.kubernetes.io/name: nats
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: nats
      meta.helm.sh/release-namespace: infrastructure
    creationTimestamp: "2025-07-06T05:35:38Z"
    labels:
      app.kubernetes.io/component: nats
      app.kubernetes.io/instance: nats
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nats
      app.kubernetes.io/version: 2.11.6
      helm.sh/chart: nats-1.3.9
    name: nats-headless
    namespace: infrastructure
    resourceVersion: "5646920"
    uid: 0fc50f18-7916-4c2e-95ec-dfaf4cd12f47
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: tcp
      name: nats
      port: 4222
      protocol: TCP
      targetPort: nats
    - appProtocol: http
      name: monitor
      port: 8222
      protocol: TCP
      targetPort: monitor
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/component: nats
      app.kubernetes.io/instance: nats
      app.kubernetes.io/name: nats
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"redis","namespace":"infrastructure"},"spec":{"ports":[{"nodePort":31379,"port":6379,"targetPort":6379}],"selector":{"app":"redis"},"type":"NodePort"}}
    creationTimestamp: "2025-07-06T06:04:59Z"
    name: redis
    namespace: infrastructure
    resourceVersion: "5652383"
    uid: 1fdce587-74a4-46fd-b9e0-08c46ece18cd
  spec:
    clusterIP: 10.105.197.130
    clusterIPs:
    - 10.105.197.130
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - nodePort: 31379
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app: redis
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: nats
      meta.helm.sh/release-namespace: infrastructure
    creationTimestamp: "2025-07-06T05:35:38Z"
    generation: 1
    labels:
      app.kubernetes.io/component: nats-box
      app.kubernetes.io/instance: nats
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nats
      app.kubernetes.io/version: 2.11.6
      helm.sh/chart: nats-1.3.9
    name: nats-box
    namespace: infrastructure
    resourceVersion: "5943205"
    uid: 80f259d2-914b-411d-8d84-2b0b46b71c6a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: nats-box
        app.kubernetes.io/instance: nats
        app.kubernetes.io/name: nats
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: nats-box
          app.kubernetes.io/instance: nats
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nats
          app.kubernetes.io/version: 2.11.6
          helm.sh/chart: nats-1.3.9
      spec:
        containers:
        - args:
          - sh
          - -ec
          - trap true INT TERM; sleep infinity & wait
          command:
          - sh
          - -ec
          - |
            work_dir="$(pwd)"
            mkdir -p "$XDG_CONFIG_HOME/nats"
            cd "$XDG_CONFIG_HOME/nats"
            if ! [ -s context ]; then
              ln -s /etc/nats-contexts context
            fi
            if ! [ -f context.txt ]; then
              echo -n "default" > context.txt
            fi
            cd "$work_dir"
            exec /entrypoint.sh "$@"
          - --
          image: natsio/nats-box:0.18.0
          imagePullPolicy: IfNotPresent
          name: nats-box
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/nats-contexts
            name: contexts
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: contexts
          secret:
            defaultMode: 420
            secretName: nats-box-contexts
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-06T05:35:38Z"
      lastUpdateTime: "2025-07-06T05:35:47Z"
      message: ReplicaSet "nats-box-bfc4fd79f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-07-07T16:46:40Z"
      lastUpdateTime: "2025-07-07T16:46:40Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"redis","namespace":"infrastructure"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"redis"}},"template":{"metadata":{"labels":{"app":"redis"}},"spec":{"containers":[{"image":"redis:7","name":"redis","ports":[{"containerPort":6379}],"volumeMounts":[{"mountPath":"/data","name":"redis-data"}]}],"nodeSelector":{"kubernetes.io/hostname":"minisforum2"},"volumes":[{"name":"redis-data","persistentVolumeClaim":{"claimName":"redis-pvc"}}]}}}}
    creationTimestamp: "2025-07-06T06:06:02Z"
    generation: 1
    name: redis
    namespace: infrastructure
    resourceVersion: "5829313"
    uid: 4d03d887-d728-4847-8443-fe8406f6bee7
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: redis
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: redis
      spec:
        containers:
        - image: redis:7
          imagePullPolicy: IfNotPresent
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: redis-data
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum2
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-06T06:06:02Z"
      lastUpdateTime: "2025-07-06T06:06:08Z"
      message: ReplicaSet "redis-c689467c5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-07-07T04:16:43Z"
      lastUpdateTime: "2025-07-07T04:16:43Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: nats
      meta.helm.sh/release-namespace: infrastructure
    creationTimestamp: "2025-07-06T05:35:38Z"
    generation: 1
    labels:
      app.kubernetes.io/component: nats-box
      app.kubernetes.io/instance: nats
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nats
      app.kubernetes.io/version: 2.11.6
      helm.sh/chart: nats-1.3.9
      pod-template-hash: bfc4fd79f
    name: nats-box-bfc4fd79f
    namespace: infrastructure
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: nats-box
      uid: 80f259d2-914b-411d-8d84-2b0b46b71c6a
    resourceVersion: "5943204"
    uid: 35d84803-ec12-449c-af8d-e661fa5c35b9
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: nats-box
        app.kubernetes.io/instance: nats
        app.kubernetes.io/name: nats
        pod-template-hash: bfc4fd79f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: nats-box
          app.kubernetes.io/instance: nats
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nats
          app.kubernetes.io/version: 2.11.6
          helm.sh/chart: nats-1.3.9
          pod-template-hash: bfc4fd79f
      spec:
        containers:
        - args:
          - sh
          - -ec
          - trap true INT TERM; sleep infinity & wait
          command:
          - sh
          - -ec
          - |
            work_dir="$(pwd)"
            mkdir -p "$XDG_CONFIG_HOME/nats"
            cd "$XDG_CONFIG_HOME/nats"
            if ! [ -s context ]; then
              ln -s /etc/nats-contexts context
            fi
            if ! [ -f context.txt ]; then
              echo -n "default" > context.txt
            fi
            cd "$work_dir"
            exec /entrypoint.sh "$@"
          - --
          image: natsio/nats-box:0.18.0
          imagePullPolicy: IfNotPresent
          name: nats-box
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/nats-contexts
            name: contexts
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: contexts
          secret:
            defaultMode: 420
            secretName: nats-box-contexts
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-06T06:06:02Z"
    generation: 1
    labels:
      app: redis
      pod-template-hash: c689467c5
    name: redis-c689467c5
    namespace: infrastructure
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: redis
      uid: 4d03d887-d728-4847-8443-fe8406f6bee7
    resourceVersion: "5829311"
    uid: bc30c48a-b121-45b5-af7f-d9b07d094e42
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: redis
        pod-template-hash: c689467c5
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: redis
          pod-template-hash: c689467c5
      spec:
        containers:
        - image: redis:7
          imagePullPolicy: IfNotPresent
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: redis-data
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum2
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: nats
      meta.helm.sh/release-namespace: infrastructure
    creationTimestamp: "2025-07-06T05:35:38Z"
    generation: 1
    labels:
      app.kubernetes.io/component: nats
      app.kubernetes.io/instance: nats
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nats
      app.kubernetes.io/version: 2.11.6
      helm.sh/chart: nats-1.3.9
    name: nats
    namespace: infrastructure
    resourceVersion: "5959764"
    uid: 32f23ba9-408b-4c5b-99b0-8af3ea18e185
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: nats
        app.kubernetes.io/instance: nats
        app.kubernetes.io/name: nats
    serviceName: nats-headless
    template:
      metadata:
        annotations:
          checksum/config: f6e212c5ccca6e047b4546e39d56c7336a003fca6936808f64fb2bcb0a1b175b
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: nats
          app.kubernetes.io/instance: nats
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nats
          app.kubernetes.io/version: 2.11.6
          helm.sh/chart: nats-1.3.9
      spec:
        containers:
        - args:
          - --config
          - /etc/nats-config/nats.conf
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SERVER_NAME
            value: $(POD_NAME)
          image: nats:2.11.6-alpine
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - nats-server
                - -sl=ldm=/var/run/nats/nats.pid
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz?js-enabled-only=true
              port: monitor
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: nats
          ports:
          - containerPort: 4222
            name: nats
            protocol: TCP
          - containerPort: 8222
            name: monitor
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz?js-server-only=true
              port: monitor
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          startupProbe:
            failureThreshold: 90
            httpGet:
              path: /healthz
              port: monitor
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/nats-config
            name: config
          - mountPath: /var/run/nats
            name: pid
        - args:
          - -pid
          - /var/run/nats/nats.pid
          - -config
          - /etc/nats-config/nats.conf
          image: natsio/nats-server-config-reloader:0.18.2
          imagePullPolicy: IfNotPresent
          name: reloader
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/nats
            name: pid
          - mountPath: /etc/nats-config
            name: config
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            name: nats-config
          name: config
        - emptyDir: {}
          name: pid
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: nats-589bf699
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: nats-589bf699
    updatedReplicas: 1
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIaOY0eeh3THAwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNTA1MTUwOTA4MzZaFw0zNTA1MTMwOTEzMzZaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQD2nCL3wme9/hJqrteQ+SJoj1c0Qj6QiHf2WFmI2f2++/+YQauJ/Sq3o/wg
      NOd7oVwAimcGXk6avwezvE8yrkMscJkL0YF0xr1P76iDwBcVZn4Qo4MPGGfZMqTi
      6d4qKpgyzgJQ9RA90zQ20KYKCiqpsbo04giAzb7pardVBmESbq2OjEk4Or/wDohZ
      3jUXPUE5BtrvsLL8f/v9OGfjUKWgbjBj/w0h70TR6Tj6exf63lHL3Y18tV8khL2j
      c3OhF0T0/nbAOM0WSCkJ5xuByBxreuaoN6My+0L1qbFWnZVyJZnsVt2RP6KgvwBl
      aauXeZQRi5z9ZPo8t1zlub226EHTAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQYwB3Ej5rUcdz48IMKyQZrLn+iezAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQClELZiPs/n
      wiIPhfWoo5EaNSj5lR55LmuSj95LS/3cueEMzEsRNK0ATE/NrWvxkHeiBMtFFsa6
      nRco4YfRCs5acjbHfkzQeqj0ZjUXIZzy+QJxfUzJkwEEO54SNAckADXsFPVfkuN6
      9iznfFJLih/bwylJ5XVisdFxmcLFEs/fwqbjL2UoKI2nAglPTqzCDSJe7LwLvx9G
      9xT6EAZVE/+KW8KaLqB3WbomVvuvFz6oUa7ryEotQGxXi197YK5O3MFmAgLcLbvs
      quOC4Zos299t2C6OSas3Px39jQ2hcPFACrDBW7zTSS5x7dT7apIcCBqP8liXrKUx
      ewHy+dCV4GTO
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-06T05:35:04Z"
    name: kube-root-ca.crt
    namespace: infrastructure
    resourceVersion: "5646794"
    uid: 69d9ce65-16ee-4ae3-8b91-dd658f0fb733
- apiVersion: v1
  data:
    nats.conf: |
      {
        "http_port": 8222,
        "lame_duck_duration": "30s",
        "lame_duck_grace_period": "10s",
        "pid_file": "/var/run/nats/nats.pid",
        "port": 4222,
        "server_name": $SERVER_NAME
      }
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: nats
      meta.helm.sh/release-namespace: infrastructure
    creationTimestamp: "2025-07-06T05:35:38Z"
    labels:
      app.kubernetes.io/component: nats
      app.kubernetes.io/instance: nats
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nats
      app.kubernetes.io/version: 2.11.6
      helm.sh/chart: nats-1.3.9
    name: nats-config
    namespace: infrastructure
    resourceVersion: "5646918"
    uid: c4ba2118-4d52-48ca-9dad-c7c6460f6863
- apiVersion: v1
  data:
    default.json: ewogICJ1cmwiOiAibmF0czovL25hdHMiCn0K
  kind: Secret
  metadata:
    annotations:
      meta.helm.sh/release-name: nats
      meta.helm.sh/release-namespace: infrastructure
    creationTimestamp: "2025-07-06T05:35:38Z"
    labels:
      app.kubernetes.io/component: nats-box
      app.kubernetes.io/instance: nats
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nats
      app.kubernetes.io/version: 2.11.6
      helm.sh/chart: nats-1.3.9
    name: nats-box-contexts
    namespace: infrastructure
    resourceVersion: "5646915"
    uid: 1b61ddd7-15f9-4f6c-992e-4d8bf15b17d9
  type: Opaque
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-06T05:35:38Z"
    labels:
      modifiedAt: "1751780138"
      name: nats
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.nats.v1
    namespace: infrastructure
    resourceVersion: "5646937"
    uid: 365f6e72-44aa-4c2d-bba7-0bd89ed2f3ae
  type: helm.sh/release.v1
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"PersistentVolumeClaim","metadata":{"annotations":{},"name":"redis-pvc","namespace":"infrastructure"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"40Gi"}},"storageClassName":"local-path"}}
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-provisioner: rancher.io/local-path
      volume.kubernetes.io/selected-node: minisforum2
      volume.kubernetes.io/storage-provisioner: rancher.io/local-path
    creationTimestamp: "2025-07-06T06:06:02Z"
    finalizers:
    - kubernetes.io/pvc-protection
    name: redis-pvc
    namespace: infrastructure
    resourceVersion: "5652573"
    uid: d8ba547a-4892-4d75-aa5a-f5b5b3483187
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 40Gi
    storageClassName: local-path
    volumeMode: Filesystem
    volumeName: pvc-d8ba547a-4892-4d75-aa5a-f5b5b3483187
  status:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 40Gi
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      local.path.provisioner/selected-node: minisforum3
      pv.kubernetes.io/bound-by-controller: "yes"
      pv.kubernetes.io/provisioned-by: rancher.io/local-path
    creationTimestamp: "2025-07-03T10:40:09Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-51e8119a-bca0-4c7e-9c1d-8687264fe915
    resourceVersion: "5647067"
    uid: 8bbddbe4-2131-4c8c-b6a6-764b278317a4
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 50Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: logs-neo4j-0
      namespace: neo4j
      resourceVersion: "5647055"
      uid: b8fd9ba3-2222-4cd8-b99f-039db00b2591
    hostPath:
      path: /opt/local-path/pvc-51e8119a-bca0-4c7e-9c1d-8687264fe915_neo4j_logs-neo4j-0
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - minisforum3
    persistentVolumeReclaimPolicy: Retain
    storageClassName: local-path-minisforum3
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-07-06T05:36:10Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      local.path.provisioner/selected-node: minisforum2
      pv.kubernetes.io/provisioned-by: rancher.io/local-path
    creationTimestamp: "2025-07-06T05:36:47Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-51f73d5d-9be3-4e87-91fd-97c3da595674
    resourceVersion: "5647588"
    uid: 5ec67d20-f4bc-4e10-9bad-f8d878b8eb4b
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 100Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: prometheus-prometheus-kube-prometheus-prometheus-db-prometheus-prometheus-kube-prometheus-prometheus-0
      namespace: monitoring
      resourceVersion: "5647438"
      uid: 51f73d5d-9be3-4e87-91fd-97c3da595674
    hostPath:
      path: /opt/local-path-provisioner/pvc-51f73d5d-9be3-4e87-91fd-97c3da595674_monitoring_prometheus-prometheus-kube-prometheus-prometheus-db-prometheus-prometheus-kube-prometheus-prometheus-0
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - minisforum2
    persistentVolumeReclaimPolicy: Delete
    storageClassName: local-path
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-07-06T05:36:47Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      local.path.provisioner/selected-node: minisforum
      pv.kubernetes.io/provisioned-by: rancher.io/local-path
    creationTimestamp: "2025-07-06T05:37:09Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-804a1738-9246-42da-81f5-fe2f5124d49f
    resourceVersion: "5647782"
    uid: d161b405-95c4-4051-8922-37739665a99c
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 50Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: storage-loki-0
      namespace: monitoring
      resourceVersion: "5647755"
      uid: 804a1738-9246-42da-81f5-fe2f5124d49f
    hostPath:
      path: /opt/local-path-provisioner/pvc-804a1738-9246-42da-81f5-fe2f5124d49f_monitoring_storage-loki-0
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - minisforum
    persistentVolumeReclaimPolicy: Delete
    storageClassName: local-path
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-07-06T05:37:09Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      local.path.provisioner/selected-node: minisforum3
      pv.kubernetes.io/bound-by-controller: "yes"
      pv.kubernetes.io/provisioned-by: rancher.io/local-path
    creationTimestamp: "2025-07-03T10:40:09Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-b72a2053-aca5-40f1-8afc-5c423116f619
    resourceVersion: "5647074"
    uid: 37f6c6bf-9420-4685-9485-5f6376ffc90b
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 1536Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: data-neo4j-0
      namespace: neo4j
      resourceVersion: "5647052"
      uid: ad007956-8b64-4192-ab5a-5d4abda007ae
    hostPath:
      path: /opt/local-path/pvc-b72a2053-aca5-40f1-8afc-5c423116f619_neo4j_data-neo4j-0
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - minisforum3
    persistentVolumeReclaimPolicy: Retain
    storageClassName: local-path-minisforum3
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-07-06T05:36:10Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      local.path.provisioner/selected-node: minisforum2
      pv.kubernetes.io/provisioned-by: rancher.io/local-path
    creationTimestamp: "2025-07-06T06:06:05Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-d8ba547a-4892-4d75-aa5a-f5b5b3483187
    resourceVersion: "5652571"
    uid: a9822cea-4d7e-4228-b39d-398746988e28
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 40Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: redis-pvc
      namespace: infrastructure
      resourceVersion: "5652547"
      uid: d8ba547a-4892-4d75-aa5a-f5b5b3483187
    hostPath:
      path: /opt/local-path-provisioner/pvc-d8ba547a-4892-4d75-aa5a-f5b5b3483187_infrastructure_redis-pvc
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - minisforum2
    persistentVolumeReclaimPolicy: Delete
    storageClassName: local-path
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-07-06T06:06:05Z"
    phase: Bound
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: "2025-07-06T05:35:04Z"
    name: default
    namespace: infrastructure
    resourceVersion: "5646795"
    uid: 3cf61308-4972-4508-bc78-243d17e39bc1
kind: List
metadata:
  resourceVersion: ""
