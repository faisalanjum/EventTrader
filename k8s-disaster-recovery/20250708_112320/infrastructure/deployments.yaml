apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: nats
      meta.helm.sh/release-namespace: infrastructure
    creationTimestamp: "2025-07-06T05:35:38Z"
    generation: 1
    labels:
      app.kubernetes.io/component: nats-box
      app.kubernetes.io/instance: nats
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nats
      app.kubernetes.io/version: 2.11.6
      helm.sh/chart: nats-1.3.9
    name: nats-box
    namespace: infrastructure
    resourceVersion: "5943205"
    uid: 80f259d2-914b-411d-8d84-2b0b46b71c6a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: nats-box
        app.kubernetes.io/instance: nats
        app.kubernetes.io/name: nats
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: nats-box
          app.kubernetes.io/instance: nats
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nats
          app.kubernetes.io/version: 2.11.6
          helm.sh/chart: nats-1.3.9
      spec:
        containers:
        - args:
          - sh
          - -ec
          - trap true INT TERM; sleep infinity & wait
          command:
          - sh
          - -ec
          - |
            work_dir="$(pwd)"
            mkdir -p "$XDG_CONFIG_HOME/nats"
            cd "$XDG_CONFIG_HOME/nats"
            if ! [ -s context ]; then
              ln -s /etc/nats-contexts context
            fi
            if ! [ -f context.txt ]; then
              echo -n "default" > context.txt
            fi
            cd "$work_dir"
            exec /entrypoint.sh "$@"
          - --
          image: natsio/nats-box:0.18.0
          imagePullPolicy: IfNotPresent
          name: nats-box
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/nats-contexts
            name: contexts
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: contexts
          secret:
            defaultMode: 420
            secretName: nats-box-contexts
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-06T05:35:38Z"
      lastUpdateTime: "2025-07-06T05:35:47Z"
      message: ReplicaSet "nats-box-bfc4fd79f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-07-07T16:46:40Z"
      lastUpdateTime: "2025-07-07T16:46:40Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"redis","namespace":"infrastructure"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"redis"}},"template":{"metadata":{"labels":{"app":"redis"}},"spec":{"containers":[{"image":"redis:7","name":"redis","ports":[{"containerPort":6379}],"volumeMounts":[{"mountPath":"/data","name":"redis-data"}]}],"nodeSelector":{"kubernetes.io/hostname":"minisforum2"},"volumes":[{"name":"redis-data","persistentVolumeClaim":{"claimName":"redis-pvc"}}]}}}}
    creationTimestamp: "2025-07-06T06:06:02Z"
    generation: 1
    name: redis
    namespace: infrastructure
    resourceVersion: "5829313"
    uid: 4d03d887-d728-4847-8443-fe8406f6bee7
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: redis
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: redis
      spec:
        containers:
        - image: redis:7
          imagePullPolicy: IfNotPresent
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: redis-data
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: minisforum2
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-06T06:06:02Z"
      lastUpdateTime: "2025-07-06T06:06:08Z"
      message: ReplicaSet "redis-c689467c5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-07-07T04:16:43Z"
      lastUpdateTime: "2025-07-07T04:16:43Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
